@model IEnumerable<TodoList.Models.TodoItem>

@{
    ViewData["Title"] = "To-Do List";
    var selectedCategory = ViewData["CategoryFilter"] as string;
    var selectedPriority = ViewData["PriorityFilter"] as Priority?;
}
<style>
    .completed {
    text-decoration: line-through;
    color: violet;
    }
</style>

<h1>To-Do List</h1>

<form method="get" asp-action="Index" class="flex flex-wrap items-end gap-4 mb-6 p-4 bg-gradient-to-br 
                from-purple-50 to-white rounded-lg shadow-md">

    @* Category Filter *@
    <div>
        <label for="category" class="block text-sm font-semibold text-purple-700 mb-1">Category</label>
        <select name="categoryFilter" id="category" class="w-48 px-4 py-2 border border-purple-300 rounded-md 
                    focus:outline-none focus:ring-2 focus:ring-purple-500 bg-white">
            <option value="" select=@(string.IsNullOrEmpty(selectedCategory) ? "selected" : "")>All Categories</option>
            @if (ViewBag.Categories != null)
            {
                foreach (var c in ViewBag.Categories)
                {
                    <!option value="@c" @(c == selectedCategory ?  "selected": "")>@c</!option>
                }
            }
        </select>
    </div>

    @* Priority Filter *@
    <div>
        <label for="priority" class="block text-sm font-semibold text-purple-700 mb-1">Priority</label>
        <select name="priorityFilter" id="priority" class="w-48 px-4 py-2 border border-purple-300 
                rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 bg-white">
            <option value="" select=@(selectedPriority == null ? "selected" : "")>All Priorities</option> 
            @foreach (Priority p in Enum.GetValues(typeof(Priority)))
            {
                <!option value="@p" @(selectedPriority == p ? "selected" : "")>@p</!option>

            }
        </select>
    </div>
     @* TODO Search functionality *@
     @* Insert Searchbox too if can*@

     @*Sort Filter*@
     <div>
    <label for="sortOrder" class="block text-sm font-semibold text-purple-700 mb-1">Sort By</label>
    <select name="sortOrder" id="sortOrder" class="w-48 px-4 py-2 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 bg-white">
        <!option value="" @(ViewData["CurrentSort"]?.ToString() == "" ? "selected" : "")>Default</!option>
            <!option value="PriorityAsc" @(ViewData["CurrentSort"]?.ToString() == "PriorityAsc" ? "selected" : "")>Priority ↑</!option>
            <!option value="PriorityDesc" @(ViewData["CurrentSort"]?.ToString() == "PriorityDesc" ? "selected" : "")> Priority ↓
            </!option>
            <!option value="CategoryAsc" @(ViewData["CurrentSort"]?.ToString() == "CategoryAsc" ? "selected" : "")>Category ↑</!option>
            <!option value="CategoryDesc" @(ViewData["CurrentSort"]?.ToString() == "CategoryDesc" ? "selected" : "")>Category ↓</!option>
    </select>
</div>

	@* Filter Button *@
    <div class="pt-1">
        <button type="submit" class="mt-4 bg-purple-600 hover:bg-purple-700 text-white font-semibold px-4 py-2 rounded-lg transition">
            Filter 
        </button>
    </div>
</form>

<div class="min-h-screen bg-gradient-to-r from-purple-200 via-purple-100 to-purple-200 p-8">

    <div class="max-w-4xl mx-auto bg-white shadow-lg rounded-2xl p-6">
        <h1 class="text-3xl font-bold text-primary-dark mb-4">My To-Do List</h1>

    <div class="flex justify-between items-center mb-4">
        <a asp-action="Create" 
        class="bg-primary hover:bg-primary-dark text-white px-4 py-2 rounded-lg shadow">
            + Add New Task
        </a>
    </div>

    <table class="w-full table-auto border-collapse">
        <thead>
            <tr class="bg-primary-light text-left text-white">
                <th class="p-3 text-black">Task</th>
                <th class="p-3 text-black">Category</th>
                <th class="p-3 text-black">Priority</th>
                <th class="p-3 text-black">Completed</th>
                <th class="p-3 text-black">Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model)
            {
                <tr class="border-b hover:bg-purple-50">
                    <td class="p-3 todo-title @(item.IsCompleted ? "completed" : "")" data-id="@item.Id">@item.Title</td>
                    <td class="p-3">@item.Category</td>
                    <td class="p-3">@item.Priority </td>
                    <td class="p-3">
                        <input type="checkbox" class="toggle-complete" data-id="@item.Id" @(item.IsCompleted ? "checked" : "") />
                    </td>
                    <td class="p-3">
                         <a asp-action="Edit" asp-route-id="@item.Id" class="text-blue-600 hover:underline mr-2">Edit</a>
                         <a asp-action="Delete" asp-route-id="@item.Id" class="text-red-600 hover:underline mr-2">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function showToast(message) {
            const toast = $(`#toast`);
            toast.text(message).removeClass("hidden").addClass("opacity-100");

            setTimeout(() => {
                toast.addClass("opacity-0");
                setTimeout(() => toast.addClass("hidden").removeClass("opacity-0"), 300);
            }, 2000);
        }

        $(function () {
            $(".toggle-complete").change(function () {
                const checkbox = $(this);
                const id = checkbox.data("id");
            $.ajax({
                url:'@Url.Action("ToggleCompleteAjax", "ToDoItems")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(id),
                success: function (response) {
                    if (response.success) {
                        const titleCell = $(".todo-title[data-id='" + id  + "']");
                        if (response.isCompleted) {
                            titleCell.addClass("completed");
                            showToast(" Task marked complete!");
                        } else {
                            titleCell.removeClass("completed");
                            showToast(" Task marked incomplete.");string
                        }
                    } else {
                        showToast(" Something went wrong");
                    }
                }
            });
           });
           // Check if the server-side toast messaage exists
           const serverMessage = '@TempData["ToastMessage"]';
           if (serverMessage) {
               showToast(serverMessage);
           }
        });
    </script>
}
